=== tests/cases/compiler/rangeTypeOperatorTypes.ts ===
declare var a: (> 2);
>a : (> 2)

declare var b: (>= 3);
>b : (>= 3)

declare var c: (< 5);
>c : (< 5)

declare var d: (<= 7);
>d : (<= 7)

let e1: (>= 5) = a + b;
>e1 : (>= 5)
>a + b : (>= 5)
>a : (> 2)
>b : (>= 3)

let e2: (>= 5) = b + a;
>e2 : (>= 5)
>b + a : (>= 5)
>b : (>= 3)
>a : (> 2)

let e3: number = a + c;
>e3 : number
>a + c : number
>a : (> 2)
>c : (< 5)

let e4: number = a + d;
>e4 : number
>a + d : number
>a : (> 2)
>d : (<= 7)

let e5: number = b + c;
>e5 : number
>b + c : number
>b : (>= 3)
>c : (< 5)

let e6: number = b + d;
>e6 : number
>b + d : number
>b : (>= 3)
>d : (<= 7)

let e7: (> 8) = a + 6;
>e7 : (> 8)
>a + 6 : (> 8)
>a : (> 2)
>6 : 6

let e8: (> 8) = 6 + a;
>e8 : (> 8)
>6 + a : (> 8)
>6 : 6
>a : (> 2)

let e9: (< 7) = c + 2;
>e9 : (< 7)
>c + 2 : (< 7)
>c : (< 5)
>2 : 2

let e10: (< 7) = 2 + c;
>e10 : (< 7)
>2 + c : (< 7)
>2 : 2
>c : (< 5)


let f1: number = a - a;
>f1 : number
>a - a : number
>a : (> 2)
>a : (> 2)

let f2: number = a - b;
>f2 : number
>a - b : number
>a : (> 2)
>b : (>= 3)

let f3: (> -3) = a - c;
>f3 : (> -3)
>-3 : -3
>3 : 3
>a - c : (> -3)
>a : (> 2)
>c : (< 5)

let f4: (> -5) = a - d;
>f4 : (> -5)
>-5 : -5
>5 : 5
>a - d : (> -5)
>a : (> 2)
>d : (<= 7)

let f5: number = b - a;
>f5 : number
>b - a : number
>b : (>= 3)
>a : (> 2)

let f6: number = b - b;
>f6 : number
>b - b : number
>b : (>= 3)
>b : (>= 3)

let f7: (> -2) = b - c;
>f7 : (> -2)
>-2 : -2
>2 : 2
>b - c : (> -2)
>b : (>= 3)
>c : (< 5)

let f8: (>= -4) = b - d;
>f8 : (>= -4)
>-4 : -4
>4 : 4
>b - d : (>= -4)
>b : (>= 3)
>d : (<= 7)

let f9: (< 3) = c - a;
>f9 : (< 3)
>c - a : (< 3)
>c : (< 5)
>a : (> 2)

let f10: (< 2) = c - b;
>f10 : (< 2)
>c - b : (< 2)
>c : (< 5)
>b : (>= 3)

let f11: number = c - c;
>f11 : number
>c - c : number
>c : (< 5)
>c : (< 5)

let f12: number = c - d;
>f12 : number
>c - d : number
>c : (< 5)
>d : (<= 7)

let f13: (< 5) = d - a;
>f13 : (< 5)
>d - a : (< 5)
>d : (<= 7)
>a : (> 2)

let f14: (<= 4) = d - b;
>f14 : (<= 4)
>d - b : (<= 4)
>d : (<= 7)
>b : (>= 3)

let f15: number = d - c;
>f15 : number
>d - c : number
>d : (<= 7)
>c : (< 5)

let f16: number = d - d;
>f16 : number
>d - d : number
>d : (<= 7)
>d : (<= 7)

let f17: (> -1) = a - 3;
>f17 : (> -1)
>-1 : -1
>1 : 1
>a - 3 : (> -1)
>a : (> 2)
>3 : 3

let f18: (< 1) = 3 - a;
>f18 : (< 1)
>3 - a : (< 1)
>3 : 3
>a : (> 2)

let f19: (< 3) = c - 2;
>f19 : (< 3)
>c - 2 : (< 3)
>c : (< 5)
>2 : 2

let f20: (> -3) = 2 - c;
>f20 : (> -3)
>-3 : -3
>3 : 3
>2 - c : (> -3)
>2 : 2
>c : (< 5)


let g1: (> 4) = a * a;
>g1 : (> 4)
>a * a : (> 4)
>a : (> 2)
>a : (> 2)

let g2: (> 6) = a * b;
>g2 : (> 6)
>a * b : (> 6)
>a : (> 2)
>b : (>= 3)

let g3: number = a * c;
>g3 : number
>a * c : number
>a : (> 2)
>c : (< 5)

let g4: number = a * d;
>g4 : number
>a * d : number
>a : (> 2)
>d : (<= 7)

let g5: (> 6) = b * a;
>g5 : (> 6)
>b * a : (> 6)
>b : (>= 3)
>a : (> 2)

let g6: (>= 9) = b * b;
>g6 : (>= 9)
>b * b : (>= 9)
>b : (>= 3)
>b : (>= 3)

let g7: number = b * c;
>g7 : number
>b * c : number
>b : (>= 3)
>c : (< 5)

let g8: number = b * d;
>g8 : number
>b * d : number
>b : (>= 3)
>d : (<= 7)

let g9: number = c * c;
>g9 : number
>c * c : number
>c : (< 5)
>c : (< 5)

let g10: number = c * d;
>g10 : number
>c * d : number
>c : (< 5)
>d : (<= 7)

let g11: number = d * d;
>g11 : number
>d * d : number
>d : (<= 7)
>d : (<= 7)

let g12: (> 4) = a * 2;
>g12 : (> 4)
>a * 2 : (> 4)
>a : (> 2)
>2 : 2

let g13: (> 4) = 2 * a;
>g13 : (> 4)
>2 * a : (> 4)
>2 : 2
>a : (> 2)

let g14: (<= 42) = d * 6;
>g14 : (<= 42)
>d * 6 : (<= 42)
>d : (<= 7)
>6 : 6

let g15: (<= 42) = 6 * d;
>g15 : (<= 42)
>6 * d : (<= 42)
>6 : 6
>d : (<= 7)


let h1: (>= 0) = a / a;
>h1 : (>= 0)
>a / a : (>= 0)
>a : (> 2)
>a : (> 2)

let h2: (>= 0) = a / b;
>h2 : (>= 0)
>a / b : (>= 0)
>a : (> 2)
>b : (>= 3)

let h3: number = a / c;
>h3 : number
>a / c : number
>a : (> 2)
>c : (< 5)

let h4: number = a / d;
>h4 : number
>a / d : number
>a : (> 2)
>d : (<= 7)

let h5: (>= 0) = b / a;
>h5 : (>= 0)
>b / a : (>= 0)
>b : (>= 3)
>a : (> 2)

let h6: number = b / c;
>h6 : number
>b / c : number
>b : (>= 3)
>c : (< 5)

let h7: number = b / d;
>h7 : number
>b / d : number
>b : (>= 3)
>d : (<= 7)

let h8: (< 2.5) = c / a;
>h8 : (< 2.5)
>c / a : (< 2.5)
>c : (< 5)
>a : (> 2)

let h9: number = c / c;
>h9 : number
>c / c : number
>c : (< 5)
>c : (< 5)

let h10: number = c / d;
>h10 : number
>c / d : number
>c : (< 5)
>d : (<= 7)

let h11: (< 3.5) = d / a;
>h11 : (< 3.5)
>d / a : (< 3.5)
>d : (<= 7)
>a : (> 2)

let h12: number = d / c;
>h12 : number
>d / c : number
>d : (<= 7)
>c : (< 5)

let h13: (> 2) = a / 1;
>h13 : (> 2)
>a / 1 : (> 2)
>a : (> 2)
>1 : 1

let h14: (> 4) = a / 0.5;
>h14 : (> 4)
>a / 0.5 : (> 4)
>a : (> 2)
>0.5 : 0.5

let h15: (>= 0) & (< 0.5) = 1 / a;
>h15 : (>= 0) & (< 0.5)
>1 / a : (>= 0) & (< 0.5)
>1 : 1
>a : (> 2)

let h16: number = 1 / c;
>h16 : number
>1 / c : number
>1 : 1
>c : (< 5)

