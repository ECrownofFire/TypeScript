tests/cases/compiler/rangeTypeBasics.ts(35,12): error TS1110: Type expected.
tests/cases/compiler/rangeTypeBasics.ts(35,27): error TS1005: ';' expected.
tests/cases/compiler/rangeTypeBasics.ts(36,12): error TS1110: Type expected.
tests/cases/compiler/rangeTypeBasics.ts(36,18): error TS1005: ';' expected.
tests/cases/compiler/rangeTypeBasics.ts(37,14): error TS1005: ')' expected.
tests/cases/compiler/rangeTypeBasics.ts(37,15): error TS1109: Expression expected.
tests/cases/compiler/rangeTypeBasics.ts(38,14): error TS1139: Type parameter declaration expected.
tests/cases/compiler/rangeTypeBasics.ts(38,15): error TS1109: Expression expected.
tests/cases/compiler/rangeTypeBasics.ts(39,12): error TS1110: Type expected.
tests/cases/compiler/rangeTypeBasics.ts(39,15): error TS1109: Expression expected.
tests/cases/compiler/rangeTypeBasics.ts(40,12): error TS1110: Type expected.
tests/cases/compiler/rangeTypeBasics.ts(40,12): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
tests/cases/compiler/rangeTypeBasics.ts(40,14): error TS1109: Expression expected.
tests/cases/compiler/rangeTypeBasics.ts(40,15): error TS1109: Expression expected.
tests/cases/compiler/rangeTypeBasics.ts(41,12): error TS1110: Type expected.
tests/cases/compiler/rangeTypeBasics.ts(41,15): error TS1109: Expression expected.
tests/cases/compiler/rangeTypeBasics.ts(42,14): error TS1139: Type parameter declaration expected.
tests/cases/compiler/rangeTypeBasics.ts(42,15): error TS1139: Type parameter declaration expected.
tests/cases/compiler/rangeTypeBasics.ts(42,16): error TS1110: Type expected.
tests/cases/compiler/rangeTypeBasics.ts(43,1): error TS1005: ')' expected.
tests/cases/compiler/rangeTypeBasics.ts(43,1): error TS1005: '>' expected.


==== tests/cases/compiler/rangeTypeBasics.ts (21 errors) ====
    let a1: (< 1);
    let a2: (< -1);
    let a3: (<= 1);
    let a4: (<= -1);
    let a5: (> 1);
    let a6: (> -1);
    let a7: (>= 1);
    let a8: (>= -1);
    
    let a9: ((> 0));
    let a10: (((> 0)));
    
    declare function b1(): (> -3.14);
    declare function b2(b2arg: (>= 42)): void;
    declare function b3(b3arg: (< 7.4)): (> 10);
    
    interface C {
        c1: (>= 4);
        c2(c2arg: (> -6)): void;
        c3(): (> 9.6);
        c4(c4arg: (<= -2)): (> 100);
    }
    
    class D {
        public d1: (> 0);
        d2(d2arg: (> 0)) {
            return d2arg;
        }
    }
    
    type E1 = (> 4);
    type E2 = (<= 10);
    type E3 = (>= -42);
    
    type F1 = (<= "notanumber");
               ~~
!!! error TS1110: Type expected.
                              ~
!!! error TS1005: ';' expected.
    type F2 = (>= "0");
               ~
!!! error TS1110: Type expected.
                     ~
!!! error TS1005: ';' expected.
    type F3 = (<4>);
                 ~
!!! error TS1005: ')' expected.
                  ~
!!! error TS1109: Expression expected.
    type F4 = (< +);
                 ~
!!! error TS1139: Type parameter declaration expected.
                  ~
!!! error TS1109: Expression expected.
    type F5 = (> +);
               ~
!!! error TS1110: Type expected.
                  ~
!!! error TS1109: Expression expected.
    type F6 = (> &);
               ~
!!! error TS1110: Type expected.
               ~
!!! error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.
                 ~
!!! error TS1109: Expression expected.
                  ~
!!! error TS1109: Expression expected.
    type F7 = (>= );
               ~
!!! error TS1110: Type expected.
                  ~
!!! error TS1109: Expression expected.
    type F8 = (< );
                 ~
!!! error TS1139: Type parameter declaration expected.
                  ~
!!! error TS1139: Type parameter declaration expected.
                   
!!! error TS1110: Type expected.
    
    
!!! error TS1005: ')' expected.
    
!!! error TS1005: '>' expected.