=== tests/cases/compiler/rangeTypeFunctions.ts ===
function a(): (> 1) {
>a : () => (> 1)

    return 3;
>3 : 3
}
let a0 = a();
>a0 : (> 1)
>a() : (> 1)
>a : () => (> 1)

let a1: number = a();
>a1 : number
>a() : (> 1)
>a : () => (> 1)

let a2: (> 1) = a();
>a2 : (> 1)
>a() : (> 1)
>a : () => (> 1)

let a3: (>= 1) = a();
>a3 : (>= 1)
>a() : (> 1)
>a : () => (> 1)

let a4: (> 0) = a();
>a4 : (> 0)
>a() : (> 1)
>a : () => (> 1)

let a5: (> 2) = a();
>a5 : (> 2)
>a() : (> 1)
>a : () => (> 1)

let a6: (< 4) = a();
>a6 : (< 4)
>a() : (> 1)
>a : () => (> 1)


function b(): (>= 0) {
>b : () => (>= 0)

    return 0;
>0 : 0
}
let b0 = b();
>b0 : (>= 0)
>b() : (>= 0)
>b : () => (>= 0)

let b1: number = b();
>b1 : number
>b() : (>= 0)
>b : () => (>= 0)

let b2: (>= 0) = b();
>b2 : (>= 0)
>b() : (>= 0)
>b : () => (>= 0)

let b3: (> 0) = b();
>b3 : (> 0)
>b() : (>= 0)
>b : () => (>= 0)

let b4: (>= 1) = b();
>b4 : (>= 1)
>b() : (>= 0)
>b : () => (>= 0)


function c(): (> 0) {
>c : () => (> 0)

    return 0;
>0 : 0
}


function d(arg: (> 0)): void {
>d : (arg: (> 0)) => void
>arg : (> 0)

    arg;
>arg : (> 0)

    return;
}
let d1 = d(1);
>d1 : void
>d(1) : void
>d : (arg: (> 0)) => void
>1 : 1

let d2 = d(0);
>d2 : void
>d(0) : void
>d : (arg: (> 0)) => void
>0 : 0


function e(arg: (> 0)): (> 0) {
>e : (arg: (> 0)) => (> 0)
>arg : (> 0)

    return arg;
>arg : (> 0)
}
let e1 = e(1);
>e1 : (> 0)
>e(1) : (> 0)
>e : (arg: (> 0)) => (> 0)
>1 : 1

let e2 = e(0);
>e2 : (> 0)
>e(0) : (> 0)
>e : (arg: (> 0)) => (> 0)
>0 : 0

