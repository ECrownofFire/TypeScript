=== tests/cases/compiler/rangeTypeAssignment.ts ===
let a1: (> 0) = 1;
>a1 : Symbol(a1, Decl(rangeTypeAssignment.ts, 0, 3))

let a2: number = a1;
>a2 : Symbol(a2, Decl(rangeTypeAssignment.ts, 1, 3))
>a1 : Symbol(a1, Decl(rangeTypeAssignment.ts, 0, 3))

let a3: (> -1) = a1;
>a3 : Symbol(a3, Decl(rangeTypeAssignment.ts, 2, 3))
>a1 : Symbol(a1, Decl(rangeTypeAssignment.ts, 0, 3))

let a4: (>= 0) = a1;
>a4 : Symbol(a4, Decl(rangeTypeAssignment.ts, 3, 3))
>a1 : Symbol(a1, Decl(rangeTypeAssignment.ts, 0, 3))

let a5: (> 0) = a1;
>a5 : Symbol(a5, Decl(rangeTypeAssignment.ts, 4, 3))
>a1 : Symbol(a1, Decl(rangeTypeAssignment.ts, 0, 3))

let b1: number = 0;
>b1 : Symbol(b1, Decl(rangeTypeAssignment.ts, 6, 3))

let b2: (< 0) = b1;
>b2 : Symbol(b2, Decl(rangeTypeAssignment.ts, 7, 3))
>b1 : Symbol(b1, Decl(rangeTypeAssignment.ts, 6, 3))

let b3: (> 0) = b1;
>b3 : Symbol(b3, Decl(rangeTypeAssignment.ts, 8, 3))
>b1 : Symbol(b1, Decl(rangeTypeAssignment.ts, 6, 3))

enum C {
>C : Symbol(C, Decl(rangeTypeAssignment.ts, 8, 19))

    foo,
>foo : Symbol(C.foo, Decl(rangeTypeAssignment.ts, 10, 8))

    bar
>bar : Symbol(C.bar, Decl(rangeTypeAssignment.ts, 11, 8))
}

let c1: C = C.foo;
>c1 : Symbol(c1, Decl(rangeTypeAssignment.ts, 15, 3))
>C : Symbol(C, Decl(rangeTypeAssignment.ts, 8, 19))
>C.foo : Symbol(C.foo, Decl(rangeTypeAssignment.ts, 10, 8))
>C : Symbol(C, Decl(rangeTypeAssignment.ts, 8, 19))
>foo : Symbol(C.foo, Decl(rangeTypeAssignment.ts, 10, 8))

let c2: (>= 0) = C.foo;
>c2 : Symbol(c2, Decl(rangeTypeAssignment.ts, 16, 3))
>C.foo : Symbol(C.foo, Decl(rangeTypeAssignment.ts, 10, 8))
>C : Symbol(C, Decl(rangeTypeAssignment.ts, 8, 19))
>foo : Symbol(C.foo, Decl(rangeTypeAssignment.ts, 10, 8))

let c3: C = c2;
>c3 : Symbol(c3, Decl(rangeTypeAssignment.ts, 18, 3))
>C : Symbol(C, Decl(rangeTypeAssignment.ts, 8, 19))
>c2 : Symbol(c2, Decl(rangeTypeAssignment.ts, 16, 3))

